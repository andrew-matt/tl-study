{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","clearTodosDataAC","fetchTodolistsTC","todolists","forEach","todolist","items","setTasksAC","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","useDispatch","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fa77d26.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ba20e791-30f7-4ca9-a0a3-61abf10b8541',\r\n    }\r\n});\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me');\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n};\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {clearTodosDataAC} from '../TodolistsList/todolists-reducer';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        });\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n                dispatch(clearTodosDataAC());\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        });\r\n};\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof clearTodosDataAC>\r\n\r\n\r\n\r\n","import {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false,\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status};\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error};\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized};\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const);\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED',\r\n    isInitialized,\r\n} as const);\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppIsInitializedAC(true));\r\n        });\r\n};\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedActionType = ReturnType<typeof setAppIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppIsInitializedActionType\r\n","import {\r\n    AddTodolistActionType,\r\n    clearTodosDataAC,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n} from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'CLEAR-TODOLISTS':\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {fetchTasksTC} from './tasks-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl);\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl);\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl);\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        case 'CLEAR-TODOLISTS':\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const);\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const);\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title,\r\n} as const);\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter,\r\n} as const);\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status,\r\n} as const);\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const);\r\n\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR-TODOLISTS'} as const);\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n                return res.data;\r\n            })\r\n            .then((res) => {\r\n                res.forEach(todolist => dispatch(fetchTasksTC(todolist.id)));\r\n            });\r\n    };\r\n};\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            });\r\n    };\r\n};\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            });\r\n    };\r\n};\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC(id, title));\r\n            });\r\n    };\r\n};\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api';\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n} from './todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC();\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>;\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>;\r\n                })\r\n            }\r\n        </Grid>\r\n    </>;\r\n};\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm();\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>;\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                        }/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>;\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {CircularProgress} from '@mui/material';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={() => dispatch(logoutTC())} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404. Page not found</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}